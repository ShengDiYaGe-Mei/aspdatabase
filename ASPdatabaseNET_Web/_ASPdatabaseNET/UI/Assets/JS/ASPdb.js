/* Generated by SharpKit 5 v5.4.4 */
if (typeof ($Inherit) == 'undefined') {
	var $Inherit = function (ce, ce2) {

		if (typeof (Object.getOwnPropertyNames) == 'undefined') {

			for (var p in ce2.prototype)
				if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p])
					ce.prototype[p] = ce2.prototype[p];
			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		} else {

			var props = Object.getOwnPropertyNames(ce2.prototype);
			for (var i = 0; i < props.length; i++)
				if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined')
					Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));

			for (var p in ce2)
				if (typeof (ce[p]) == 'undefined')
					ce[p] = ce2[p];
			ce.$baseCtor = ce2;

		}

	}
};

if (typeof(Int32Array) == "undefined")
    var Int32Array = Array;

if (typeof(ASPdb) == "undefined")
    var ASPdb = {};
if (typeof(ASPdb.Ajax) == "undefined")
    ASPdb.Ajax = {};
ASPdb.Ajax.AjaxHelper = function (){
    this.IsClientCode = false;
    this.Parameters = new Array(0);
    this.ParameterIndex = 0;
    try{
        var tmp = Typeof(System.Int32.ctor).toString();
        this.IsClientCode = false;
    }
    catch($$e24){
        this.IsClientCode = true;
    }
};
ASPdb.Ajax.AjaxHelper.get_New = function (){
    return new ASPdb.Ajax.AjaxHelper();
};
ASPdb.Ajax.AjaxHelper.prototype.ToJson = function (obj){
    try{
        return (new System.Web.Script.Serialization.JavaScriptSerializer.ctor()).Serialize$$Object(obj);
    }
    catch($$e25){
    }
    var rtn = "";
    var o = obj;
    eval("rtn = $.toJSON(o);");
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype.FromJson = function (json){
    if (!this.IsClientCode){
        try{
            return (new System.Web.Script.Serialization.JavaScriptSerializer.ctor()).Deserialize$1$$String(T, json);
        }
        catch(exc){
            ASPdb.Framework.Debug.RecordException(exc);
            return null;
        }
    }
    else {
        var rtn = null;
        eval("rtn = $.evalJSON(json);");
        return rtn;
    }
};
ASPdb.Ajax.AjaxHelper.prototype._Json = function (){
    var rtn = null;
    try{
        rtn = this.FromJson(this.Parameters[this.ParameterIndex].toString());
    }
    catch(exc){
        ASPdb.Framework.Debug.RecordException(exc);
    }
    this.ParameterIndex++;
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype._Json2 = function (fullTypeName){
    var method = Typeof(ASPdb.Ajax.AjaxHelper).GetMethod$$String("_Json");
    var methodGeneric = method.MakeGenericMethod(System.Type.GetType$$String(fullTypeName));
    var rtn = methodGeneric.Invoke$$Object$$Object$Array(this, null);
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype.get__Int32 = function (){
    var rtn = -1;
    try{
        rtn = System.Int32.Parse$$String(this.Parameters[this.ParameterIndex].toString().trim());
    }
    catch($$e26){
    }
    this.ParameterIndex++;
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype.get__Boolean = function (){
    var rtn = false;
    try{
        rtn = System.Boolean.Parse(this.Parameters[this.ParameterIndex].toString().trim());
    }
    catch($$e27){
    }
    this.ParameterIndex++;
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype.get__DateTime = function (){
    var rtn = null;
    try{
        rtn = System.DateTime.Parse$$String(this.Parameters[this.ParameterIndex].toString().trim());
    }
    catch($$e28){
    }
    this.ParameterIndex++;
    return rtn;
};
ASPdb.Ajax.AjaxHelper.prototype.get__String = function (){
    var rtn = "";
    try{
        rtn = this.Parameters[this.ParameterIndex].toString();
    }
    catch($$e29){
    }
    this.ParameterIndex++;
    return rtn;
};
ASPdb.Ajax.AjaxRequest = function (){
    this.DoEncryption = false;
    this.AjaxUrl = null;
    this.RemoteMethod = null;
    this.ReturnInfo = null;
    this.Parameters = null;
};
ASPdb.Ajax.AjaxRequest.New = function (ajaxUrl, remoteMethod, returnInfo){
    var rtn = new ASPdb.Ajax.AjaxRequest();
    rtn.AjaxUrl = ajaxUrl;
    rtn.RemoteMethod = remoteMethod;
    rtn.ReturnInfo = returnInfo;
    rtn.Parameters = new Array(0);
    return rtn;
};
ASPdb.Ajax.AjaxRequest.New2 = function (ajaxUrl, remoteMethod, callback_Object, callback_Method){
    var returnInfo = new ASPdb.Ajax.AjaxReturnInfo();
    returnInfo.Callback_Object = callback_Object;
    returnInfo.Callback_Method = callback_Method;
    return ASPdb.Ajax.AjaxRequest.New(ajaxUrl, remoteMethod, returnInfo);
};
ASPdb.Ajax.AjaxRequest.prototype.Send = function (){
    var ajaxRequest_This = this;
    var ajaxRequest_ToSend = new ASPdb.Ajax.AjaxRequest();
    try{
        ajaxRequest_ToSend.AjaxUrl = this.AjaxUrl;
        ajaxRequest_ToSend.RemoteMethod = this.RemoteMethod;
        ajaxRequest_ToSend.Parameters = this.Parameters;
        var ajaxSender = ASPdb.Security.AjaxSender.GetObj();
        if (this.DoEncryption){
            if (!ajaxSender.IsReady){
                alert("Required Ajax Encryption could not be established.");
                return null;
            }
            var json = "";
            eval("json = $.toJSON(ajaxRequest_ToSend);");
            json = ASPdb.Security.AESLogic.EncryptClient(ajaxSender.Get_AESKey(), json);
            var aesIndex = ajaxSender.AESIndex;
            eval("\r\n                        var jsonRequestMap = { AjaxRequest: json, AESIndex: aesIndex };\r\n                        $.post(\r\n                            this.AjaxUrl, \r\n                            jsonRequestMap, \r\n                            function (responseString) \r\n                            { \r\n                                ASPdb.Ajax.AjaxRequest.AjaxReturnMethod_AES(ajaxRequest_This, responseString, aesIndex); \r\n                            });\r\n                        ");
        }
        else {
            eval("\r\n                        var jsonRequestMap = { AjaxRequest: $.toJSON(ajaxRequest_ToSend) };\r\n                        $.post(\r\n                            this.AjaxUrl, \r\n                            jsonRequestMap, \r\n                            function (responseString) \r\n                            { \r\n                                ASPdb.Ajax.AjaxRequest.AjaxReturnMethod(ajaxRequest_This, responseString); \r\n                            });\r\n                        ");
        }
        return null;
    }
    catch(exc){
        alert("Error in AjaxRequest.Send()");
        console.log("AjaxRequest.Send() -- Exception: " + exc);
        return exc;
    }
};
ASPdb.Ajax.AjaxRequest.AjaxReturnMethod = function (ajaxRequest, ajaxResponseString){
    if (ajaxRequest.ReturnInfo != null){
        var ajaxResponse = ASPdb.Ajax.AjaxResponse.GetFromJson(ajaxResponseString);
        ajaxResponse.AjaxRequest = ajaxRequest;
        if (ajaxRequest.ReturnInfo.Callback_Object != null){
            var objToCallOn = ajaxRequest.ReturnInfo.Callback_Object;
            eval("objToCallOn." + ajaxRequest.ReturnInfo.Callback_Method + "(ajaxResponse);");
        }
        else {
            eval(ajaxRequest.ReturnInfo.Callback_Method + "(ajaxResponse);");
        }
    }
};
ASPdb.Ajax.AjaxRequest.AjaxReturnMethod_AES = function (ajaxRequest, ajaxResponseString, aesIndex){
    var ajaxSender = ASPdb.Security.AjaxSender.GetObj();
    ajaxResponseString = ASPdb.Security.AESLogic.DecryptClient(ajaxSender.Get_AESKey(), ajaxResponseString);
    ASPdb.Ajax.AjaxRequest.AjaxReturnMethod(ajaxRequest, ajaxResponseString);
};
ASPdb.Ajax.AjaxResponse = function (){
    this._returnType = null;
    this.Error = null;
    this.DoLogout = false;
    this.AjaxRequest = null;
    this.ReturnObj = null;
};
ASPdb.Ajax.AjaxResponse.prototype.get_ReturnType = function (){
    if (this._returnType != null)
        return this._returnType;
    try{
        return this.ReturnObj.GetType().toString();
    }
    catch($$e30){
        return "";
    }
};
ASPdb.Ajax.AjaxResponse.prototype.set_ReturnType = function (value){
    this._returnType = value;
};
ASPdb.Ajax.AjaxResponse.prototype.ToJson = function (){
    return (new ASPdb.Ajax.AjaxHelper()).ToJson(this);
};
ASPdb.Ajax.AjaxResponse.GetFromJson = function (json){
    var obj = (new ASPdb.Ajax.AjaxHelper()).FromJson(json);
    var returnType = "";
    eval("returnType = obj.ReturnType;");
    var rtn = new ASPdb.Ajax.AjaxResponse();
    rtn.ReturnObj = obj.ReturnObj;
    rtn.set_ReturnType(returnType);
    rtn.Error = obj.Error;
    rtn.AjaxRequest = obj.AjaxRequest;
    return rtn;
};
ASPdb.Ajax.AjaxResponse.prototype.Send = function (){
    System.Web.HttpContext.get_Current().get_Response().Write$$String(this.ToJson());
};
ASPdb.Ajax.AjaxResponse.prototype.Send_AES = function (aesIndex){
    var cipherText = ASPdatabaseNET.Users.UserSessionLogic.EncryptAES(aesIndex, this.ToJson());
    System.Web.HttpContext.get_Current().get_Response().Write$$String(cipherText);
};
ASPdb.Ajax.AjaxResponse.prototype.SetException = function (exc){
    this.Error = (function (){
        var $v3 = new ASPdb.FrameworkUI.ErrorInfo();
        $v3.Message = exc.get_Message();
        $v3.StackTrace = exc.get_StackTrace();
        return $v3;
    }).call(this);
};
ASPdb.Ajax.AjaxResponse_Generic = function (){
    this.ReturnObj = null;
    this.ReturnType = null;
    this.Error = null;
    this.AjaxRequest = null;
};
ASPdb.Ajax.AjaxReturnInfo = function (){
    this.Callback_Object = null;
    this.Callback_Method = null;
    this.DataObj = null;
};
ASPdb.Ajax.AjaxReturnInfo.New = function (callback_Object, callback_Method){
    var rtn = new ASPdb.Ajax.AjaxReturnInfo();
    rtn.Callback_Object = callback_Object;
    rtn.Callback_Method = callback_Method;
    rtn.DataObj = null;
    return rtn;
};
ASPdb.Ajax.AjaxServiceProxy = function (){
    this.IsClientCode = true;
    this.AjaxUrl = "";
    this.aj = new ASPdb.Ajax.AjaxHelper();
    this.Ajax = null;
    try{
        this.AjaxUrl = ASPdb.FrameworkUI.Cookies.get_ASPdb_AjaxGatewayUrl();
    }
    catch(exc){
        var msg = exc;
    }
    if (this.AjaxUrl == null || this.AjaxUrl == "")
        alert("In AjaxServiceProxy() -- Cookie not found ");
};
ASPdb.Ajax.AjaxServiceProxy.prototype.SetCallback = function (callback_Object, callback_Method, callback_DataObj){
    this.Ajax = ASPdb.Ajax.AjaxRequest.New2(this.AjaxUrl, "", callback_Object, callback_Method);
    this.Ajax.ReturnInfo.DataObj = callback_DataObj;
};
ASPdb.Ajax.AjaxServiceProxy.prototype.Bind = function (){
    var rtn = null;
    var thisObj = this;
    eval("rtn = thisObj");
    return rtn;
};
ASPdb.Ajax.AjaxServiceProxy.prototype.IgnoreError = function (){
    var rtn = null;
    var thisObj = this;
    eval("rtn = thisObj");
    return rtn;
};
if (typeof(ASPdb.Authentication) == "undefined")
    ASPdb.Authentication = {};
ASPdb.Authentication.UserInfo = function (){
};
if (typeof(ASPdb.FrameworkUI) == "undefined")
    ASPdb.FrameworkUI = {};
ASPdb.FrameworkUI.Arr = function (){
};
ASPdb.FrameworkUI.Arr.Len = function (arrayObj){
    var len = 0;
    try{
        eval("len = arrayObj.length;");
    }
    catch($$e31){
    }
    return len;
};
ASPdb.FrameworkUI.Arr.GetNewGenericArray = function (tmpNullObj){
    var rtn = tmpNullObj;
    eval("rtn = new Array();");
    return rtn;
};
ASPdb.FrameworkUI.MRBPattern = function (){
    this.ModelBindingHelper = null;
    this._model = null;
    this._previousModel = null;
    this._viewModel = null;
    this.IsInstantiated = false;
    this.IsOpen = false;
    this.OnInstantiation = new ASPdb.FrameworkUI.JsEvent_BeforeAfter();
    this.OnOpen = new ASPdb.FrameworkUI.JsEvent_BeforeAfter();
    this.OnChange = new ASPdb.FrameworkUI.JsEvent_BeforeAfter();
    this.OnClose = new ASPdb.FrameworkUI.JsEvent_BeforeAfter();
    this.jRoot = null;
    this.ModelBindingHelper = new ASPdb.FrameworkUI.MRB.ModelBindingHelper(this);
};
ASPdb.FrameworkUI.MRBPattern.prototype.get_Model = function (){
    this.OnModel_Get();
    return this._model;
};
ASPdb.FrameworkUI.MRBPattern.prototype.set_Model = function (value){
    this._previousModel = this._model;
    this._model = value;
    this.OnModel_Set();
};
Object.defineProperty(ASPdb.FrameworkUI.MRBPattern.prototype, "Model", {
    get: ASPdb.FrameworkUI.MRBPattern.prototype.get_Model,
    set: ASPdb.FrameworkUI.MRBPattern.prototype.set_Model
});
ASPdb.FrameworkUI.MRBPattern.prototype.OnModel_Get = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.OnModel_Set = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.get_ViewModel = function (){
    this.OnViewModel_Get();
    return this._viewModel;
};
ASPdb.FrameworkUI.MRBPattern.prototype.set_ViewModel = function (value){
    this._viewModel = value;
    this.OnViewModel_Set();
};
Object.defineProperty(ASPdb.FrameworkUI.MRBPattern.prototype, "ViewModel", {
    get: ASPdb.FrameworkUI.MRBPattern.prototype.get_ViewModel,
    set: ASPdb.FrameworkUI.MRBPattern.prototype.set_ViewModel
});
ASPdb.FrameworkUI.MRBPattern.prototype.OnViewModel_Get = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.OnViewModel_Set = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.Get_jRoot = function (){
    return this.jRoot;
};
ASPdb.FrameworkUI.MRBPattern.prototype.Get_IsInstantiated = function (){
    return this.IsInstantiated;
};
ASPdb.FrameworkUI.MRBPattern.prototype.Get_IsOpen = function (){
    return this.IsOpen;
};
ASPdb.FrameworkUI.MRBPattern.prototype.SetModel = function (ajaxResponse){
    this.set_Model(ajaxResponse.ReturnObj);
    return this.get_Model();
};
ASPdb.FrameworkUI.MRBPattern.prototype.GetModelWithoutFiringEvents = function (){
    return this._model;
};
ASPdb.FrameworkUI.MRBPattern.prototype.jF = function (selector){
    try{
        return this.jRoot.find(selector);
    }
    catch($$e32){
        return null;
    }
};
ASPdb.FrameworkUI.MRBPattern.prototype.jF2 = function (selector){
    try{
        var list_ToExclude = this.jF(".jRoot").find(selector);
        var list_AllItems = this.jF(selector);
        var k = 0;
        var list_Filtered = new Array(0);
        for (var i = 0; i < list_AllItems.length; i++){
            var keepItem = true;
            for (var j = 0; j < list_ToExclude.length; j++){
                if (list_ToExclude[j] == list_AllItems[i]){
                    keepItem = false;
                    j = list_ToExclude.length + 1;
                }
            }
            if (keepItem)
                list_Filtered[k++] = list_AllItems[i];
        }
        return $(list_Filtered);
    }
    catch($$e33){
        return null;
    }
};
ASPdb.FrameworkUI.MRBPattern.prototype.Instantiate = function (){
    this.OnInstantiation.Before.Fire();
    this.Instantiate_Sub();
    this.ConnectEvents();
    this.IsInstantiated = true;
    this.OnInstantiation.After.Fire();
};
ASPdb.FrameworkUI.MRBPattern.prototype.Instantiate_Sub = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.ConnectEvents = function (){
    ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.BindEvents(this);
    this.ConnectEvents_Sub();
};
ASPdb.FrameworkUI.MRBPattern.prototype.ConnectEvents_Sub = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.BindUI = function (){
    if (this.ModelBindingHelper == null)
        return;
    this.ModelBindingHelper.Bind_ModelToUI(this, "*");
};
ASPdb.FrameworkUI.MRBPattern.prototype.BindUI_Single = function (modelKey){
    if (this.ModelBindingHelper == null)
        return;
    this.ModelBindingHelper.Bind_ModelToUI(this, modelKey);
};
ASPdb.FrameworkUI.MRBPattern.prototype.Open = function (){
    this.OnOpen.Before.Fire();
    this.jRoot.show();
    this.Open_Sub();
    this.IsOpen = true;
    this.OnOpen.After.Fire();
};
ASPdb.FrameworkUI.MRBPattern.prototype.Open_Sub = function (){
};
ASPdb.FrameworkUI.MRBPattern.prototype.Close = function (){
    this.OnClose.Before.Fire();
    this.jRoot.hide();
    this.Close_Sub();
    this.IsOpen = false;
    this.OnClose.After.Fire();
};
ASPdb.FrameworkUI.MRBPattern.prototype.Close_Sub = function (){
};
ASPdb.FrameworkUI.MRBPattern.GetCssTree = function (){
    var rtn = "";
    rtn += ASPdb.FrameworkUI.MRBPattern.GetCssRoot();
    return rtn;
};
ASPdb.FrameworkUI.MRBPattern.GetCssRoot = function (){
    return "";
};
ASPdb.FrameworkUI.MRBPattern.prototype.GetHtmlRoot = function (){
    return this.GetHtml_FromTemplate();
};
ASPdb.FrameworkUI.MRBPattern.prototype.GetTemplate = function (){
    return "";
};
ASPdb.FrameworkUI.MRBPattern.prototype.GetHtml_FromTemplate = function (){
    var rtn = "";
    var arr = ASPdb.FrameworkUI.st.New(this.GetTemplate()).Split("<html>", true);
    if (arr.length < 1)
        return "";
    var lines = arr[1].Split("\n", false);
    var tree = null;
    var previousElement = null;
    for (var i = 0; i < lines.length; i++){
        var line = lines[i].Trim();
        if (line.StartsWith("-", false)){
            var element = new ASPdb.FrameworkUI.ElementHolder();
            element.Parse(line);
            if (tree == null){
                tree = element;
                tree.IsRoot = true;
                tree.ClassesString = ASPdb.FrameworkUI.st.New(tree.ClassesString + " jRoot").Trim().TheString;
            }
            else if (element.TreeLevel < previousElement.TreeLevel){
                var backTrack = previousElement.TreeLevel - element.TreeLevel;
                var tmpParent = previousElement;
                if (backTrack <= 50)
                    for (var b = 0; b < backTrack; b++){
                        if (tmpParent.Parent != null)
                            tmpParent = tmpParent.Parent;
                    }
                if (tmpParent != null)
                    tmpParent.AppendSibling(element);
            }
            else if (element.TreeLevel == previousElement.TreeLevel){
                previousElement.AppendSibling(element);
            }
            else if (element.TreeLevel > previousElement.TreeLevel){
                previousElement.AppendChild(element);
            }
            previousElement = element;
        }
    }
    rtn += tree.ToHtmlString();
    if (false)
        return "<div style=\'font-size: .65em; line-height: 1em;\'>" + ASPdb.FrameworkUI.st.New(rtn).Replace("<", "&lt;").Replace(">", "&gt;").Replace("\n", "<br />").TheString + "</div>";
    else
        return rtn;
};
if (typeof(ASPdb.FrameworkUI.Coms) == "undefined")
    ASPdb.FrameworkUI.Coms = {};
ASPdb.FrameworkUI.Coms.RadioMenu = function (radioGroupName){
    this.RadioGroupName = null;
    ASPdb.FrameworkUI.MRBPattern.call(this);
    this.RadioGroupName = radioGroupName;
    this.Instantiate();
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.Instantiate_Sub = function (){
    this.jRoot = $("<div class=\'Coms_RadioMenu jRoot\'>");
    this.jRoot.append(this.GetHtmlRoot());
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.OnModel_Set = function (){
    if (this.IsOpen)
        this.UpdateUI();
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.Open_Sub = function (){
    this.jRoot.html("");
    if (this.get_ViewModel() == null || this.get_ViewModel().List == null || this.get_ViewModel().List.length < 1)
        return;
    for (var i = 0; i < this.get_ViewModel().List.length; i++){
        var item = this.get_ViewModel().List[i];
        var indexClass = "ItemIndex_" + i;
        var html = ASPdb.FrameworkUI.JsStr.StrFormat4("\r\n                    <div class=\'Item {0}\'>\r\n                        <input type=\'radio\' name=\'{1}\' value=\'{2}\' /> \r\n                        {3}\r\n                    </div>", indexClass, this.RadioGroupName, item.Value, item.Text);
        this.jRoot.append(html);
        ASPdb.FrameworkUI.Evt.Attach_Click(this, indexClass, "Div_Click", i);
    }
    this.UpdateUI();
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.UpdateUI = function (){
    this.jF2(".Item").removeClass("Selected");
    this.jF2(".Item input").attr("checked", false);
    for (var i = 0; i < this.get_ViewModel().List.length; i++){
        var item = this.get_ViewModel().List[i];
        if (item.Value == this.get_Model()){
            var div = this.jF2(".ItemIndex_" + i);
            div.addClass("Selected");
            div.find("input").attr("checked", true);
            i = this.get_ViewModel().List.length + 1;
        }
    }
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.Div_Click = function (eventInfo){
    this.OnChange.Before.Fire();
    var index = eventInfo.PassThruDataObj;
    this.set_Model(this.get_ViewModel().List[index].Value);
    this.UpdateUI();
    this.OnChange.After.Fire();
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.GetSelectedValue = function (){
    var items = this.jF("input[type=radio]");
    for (var i = 0; i < items.length; i++){
        var item = $(items[i]);
        if (item.attr("checked") == "checked")
            return item.val();
    }
    return null;
};
ASPdb.FrameworkUI.Coms.RadioMenu.GetCssTree = function (){
    var rtn = "";
    rtn += ASPdb.FrameworkUI.Coms.RadioMenu.GetCssRoot();
    return rtn;
};
ASPdb.FrameworkUI.Coms.RadioMenu.GetCssRoot = function (){
    return "\r\n                .Coms_RadioMenu { }\r\n                ";
};
ASPdb.FrameworkUI.Coms.RadioMenu.prototype.GetHtmlRoot = function (){
    return "";
};
$Inherit(ASPdb.FrameworkUI.Coms.RadioMenu, ASPdb.FrameworkUI.MRBPattern);
ASPdb.FrameworkUI.Cookies = function (){
};
ASPdb.FrameworkUI.Cookies.Get = function (cookieName){
    var nameEQ = cookieName + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++){
        var c = ca[i];
        while (c.charAt(0) == " ")
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0)
            return c.substring(nameEQ.length, c.length);
    }
    return null;
};
ASPdb.FrameworkUI.Cookies.Set = function (cookieName, value, expireDays){
    var expires = "";
    if (expireDays < -1 || expireDays > 0){
        var date = new Date();
        date.setTime(date.getTime() + (expireDays * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    }
    document.cookie = cookieName + "=" + value + expires + "; path=/";
};
ASPdb.FrameworkUI.Cookies.Erase = function (cookieName){
    ASPdb.FrameworkUI.Cookies.Set(cookieName, "", -2);
};
ASPdb.FrameworkUI.Cookies.get_ASPdb_BaseUrl = function (){
    return ASPdb.FrameworkUI.Cookies.Get("ASPdb_BaseUrl");
};
ASPdb.FrameworkUI.Cookies.get_ASPdb_AjaxGatewayUrl = function (){
    return ASPdb.FrameworkUI.Cookies.Get("ASPdb_AjaxGatewayUrl");
};
ASPdb.FrameworkUI.ErrorHandler = function (){
};
ASPdb.FrameworkUI.ErrorHandler.Check = function (error){
    if (error == null){
        return false;
    }
    else {
        alert("Error\n" + error.Message + "\n\n" + error.StackTrace);
        return true;
    }
};
ASPdb.FrameworkUI.ErrorInfo = function (){
    this.Message = "";
    this.StackTrace = "";
};
ASPdb.FrameworkUI.ErrorInfo.New = function (exc){
    var rtn = new ASPdb.FrameworkUI.ErrorInfo();
    rtn.Message = exc.get_Message();
    rtn.StackTrace = exc.get_StackTrace();
    return rtn;
};
ASPdb.FrameworkUI.EventInfo = function (){
    this.ElementAttachedTo = null;
    this.EventType = "";
    this.ObjectToCallOn = null;
    this.MethodToCall = "";
    this.EventObj = null;
    this.PassThruDataObj = null;
};
ASPdb.FrameworkUI.Evt = function (){
};
ASPdb.FrameworkUI.Evt.Attach_Click = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("click", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_Click2 = function (theControlObj, className, passThruDataObj){
    var methodToCall = className + "_Click";
    ASPdb.FrameworkUI.Evt.Attach("click", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_DblClick = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("dblclick", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_DoubleClick = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("doubleclick", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_KeyDown = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("keydown", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_KeyPress = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("keypress", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_KeyUp = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("keyup", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_GotFocus = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("gotfocus", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_LostFocus = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("lostfocus", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_Blur = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("blur", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_Change = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("change", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_Change2 = function (theControlObj, className, passThruDataObj){
    var methodToCall = className + "_Change";
    ASPdb.FrameworkUI.Evt.Attach("change", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseDown = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mousedown", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseEnter = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mouseenter", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseLeave = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mouseleave", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseMove = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mousemove", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseOver = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mouseover", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseOut = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mouseout", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach_MouseUp = function (theControlObj, className, methodToCall, passThruDataObj){
    ASPdb.FrameworkUI.Evt.Attach("mouseup", theControlObj, className, methodToCall, passThruDataObj);
};
ASPdb.FrameworkUI.Evt.Attach = function (eventType, theControlObj, className, methodToCall, passThruDataObj){
    className = "." + className;
    var element = null;
    try{
        var tmp1 = theControlObj;
        if (tmp1.jRoot != null){
            element = tmp1.jRoot.find(className)[0];
        }
        else if (tmp1._jRoot != null){
            element = tmp1._jRoot.find(className)[0];
        }
        ASPdb.FrameworkUI.Evt.Attach_ToElement(eventType, theControlObj, element, methodToCall, passThruDataObj);
    }
    catch(exc1){
        alert("Error in Evt.Attach(\'" + eventType + "\', ?, \'" + className + "\', \'" + methodToCall + "\', ?)  \n" + exc1);
    }
};
ASPdb.FrameworkUI.Evt.Attach_ToElement = function (eventType, theControlObj, element, methodToCall, passThruDataObj){
    try{
        var eventInfo = new ASPdb.FrameworkUI.EventInfo();
        eventInfo.EventType = eventType;
        eventInfo.ObjectToCallOn = theControlObj;
        eventInfo.MethodToCall = methodToCall;
        eventInfo.PassThruDataObj = passThruDataObj;
        eventInfo.ElementAttachedTo = element;
        var propName = "EventInfoObject_" + eventType;
        $(eventInfo.ElementAttachedTo).prop(propName, eventInfo);
        var functionToCall = null;
        eval("functionToCall = function(evt) { ASPdb.FrameworkUI.Evt.DynamicEvents_ForwardToHandler(evt, \'" + eventInfo.EventType + "\', false); }");
        var isIE = false;
        eval("isIE = $.browser.msie");
        if (isIE)
            eval("eventInfo.ElementAttachedTo.attachEvent(\'on" + eventInfo.EventType + "\', functionToCall);");
        else
            eventInfo.ElementAttachedTo.addEventListener(eventInfo.EventType, functionToCall, false);
    }
    catch(exc1){
        alert("Error in Evt.Attach_ToElement(\'" + eventType + "\', ?, ?, \'" + methodToCall + "\', ?)  \n" + exc1);
    }
};
ASPdb.FrameworkUI.Evt.Attach_NonJRootElement = function (element, eventType, objToCallOn, methodToCall, passThruDataObj){
    try{
        var isIE = false;
        eval("isIE = $.browser.msie");
        var elementIsWindow = (element == window);
        var eventInfo = new ASPdb.FrameworkUI.EventInfo();
        eventInfo.ElementAttachedTo = element;
        eventInfo.EventType = eventType;
        eventInfo.ObjectToCallOn = objToCallOn;
        eventInfo.MethodToCall = methodToCall;
        eventInfo.PassThruDataObj = passThruDataObj;
        var propName = "EventInfoObject_" + eventType;
        $(eventInfo.ElementAttachedTo).prop(propName, eventInfo);
        var functionToCall = null;
        eval("functionToCall = function(evt) { ASPdb.FrameworkUI.Evt.DynamicEvents_ForwardToHandler(evt, \'" + eventInfo.EventType + "\', " + elementIsWindow + "); }");
        if (isIE)
            eval("eventInfo.ElementAttachedTo.attachEvent(\'on" + eventInfo.EventType + "\', functionToCall);");
        else
            eventInfo.ElementAttachedTo.addEventListener(eventInfo.EventType, functionToCall, false);
    }
    catch(exc1){
        alert("Error in Evt.Attach_NonJRootElement(?, \'" + eventType + "\', ?, \'" + methodToCall + "\', ?)  \n" + exc1);
    }
};
ASPdb.FrameworkUI.Evt.DynamicEvents_ForwardToHandler = function (evt, eventType, elementIsWindow){
    try{
        var isIE = false;
        eval("isIE = $.browser.msie");
        var element = null;
        if (elementIsWindow)
            element = window;
        if (element == null){
            if (isIE)
                element = $(evt).prop("srcElement");
            else
                element = $(evt).prop("currentTarget");
        }
        var propertyName = "EventInfoObject_" + eventType;
        var eventInfo = $(element).prop(propertyName);
        if (eventInfo != null){
            eventInfo.EventObj = evt;
            if (eventInfo.ObjectToCallOn == null)
                eval(eventInfo.MethodToCall + "(eventInfo);");
            else
                eval("eventInfo.ObjectToCallOn." + eventInfo.MethodToCall + "(eventInfo);");
        }
        else {
            alert("Error in DynamicEvents_ForwardToHandler(evt, \'" + eventType + "\') \n" + "EventInfo is null.");
        }
    }
    catch(exc1){
        alert("Error in DynamicEvents_ForwardToHandler(evt, \'" + eventType + "\') \n" + exc1);
    }
};
ASPdb.FrameworkUI.Evt_TempClass_CastHelper = function (){
    this.jRoot = null;
    this._jRoot = null;
    this.clientX = -1;
    this.clientY = -1;
};
ASPdb.FrameworkUI.Evt_TempClass_CastHelper.Get_IE_Event = function (evt){
    var rtn = null;
    eval("rtn = evt.event;");
    return rtn;
};
ASPdb.FrameworkUI.IntStatic = function (){
};
ASPdb.FrameworkUI.IntStatic.Parse = function (str, defaultValue){
    try{
        var rtn = parseInt(str);
        if ($.isNumeric(rtn))
            return rtn;
    }
    catch($$e34){
    }
    return defaultValue;
};
ASPdb.FrameworkUI.JsEventDelegate = function (){
    this.CallBack_Objects = null;
    this.CallBack_Methods = null;
    this.CallBack_NumbOfParams = null;
    this.PassThruObj1 = null;
    this.PassThruObj2 = null;
    this.PassThruObj3 = null;
    this.PassThruObj4 = null;
    this.PassThruObj5 = null;
    this.CallBack_Objects = ASPdb.FrameworkUI.Arr.GetNewGenericArray(null);
    this.CallBack_Methods = ASPdb.FrameworkUI.Arr.GetNewGenericArray(null);
    this.CallBack_NumbOfParams = ASPdb.FrameworkUI.Arr.GetNewGenericArray(null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.AddHandler = function (callBack_Object, callBack_Method, callBack_NumbOfParams){
    if (this.CallBack_Objects == null)
        this.CallBack_Objects = new Array(0);
    if (this.CallBack_Methods == null)
        this.CallBack_Methods = new Array(0);
    if (this.CallBack_NumbOfParams == null)
        this.CallBack_NumbOfParams = new Int32Array(0);
    var i = ASPdb.FrameworkUI.Arr.Len(this.CallBack_Objects);
    this.CallBack_Objects[i] = callBack_Object;
    this.CallBack_Methods[i] = callBack_Method;
    this.CallBack_NumbOfParams[i] = callBack_NumbOfParams;
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire = function (){
    this.Fire5(null, null, null, null, null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire1 = function (obj1){
    this.Fire5(obj1, null, null, null, null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire2 = function (obj1, obj2){
    this.Fire5(obj1, obj2, null, null, null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire3 = function (obj1, obj2, obj3){
    this.Fire5(obj1, obj2, obj3, null, null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire4 = function (obj1, obj2, obj3, obj4){
    this.Fire5(obj1, obj2, obj3, obj4, null);
};
ASPdb.FrameworkUI.JsEventDelegate.prototype.Fire5 = function (obj1, obj2, obj3, obj4, obj5){
    for (var i = 0; i < ASPdb.FrameworkUI.Arr.Len(this.CallBack_Objects); i++){
        var callObj = this.CallBack_Objects[i];
        var callMethod = this.CallBack_Methods[i];
        var numbParams = this.CallBack_NumbOfParams[i];
        var o1 = obj1;
        var o2 = obj2;
        var o3 = obj3;
        var o4 = obj4;
        var o5 = obj5;
        if (o1 == null)
            o1 = this.PassThruObj1;
        if (o2 == null)
            o2 = this.PassThruObj2;
        if (o3 == null)
            o3 = this.PassThruObj3;
        if (o4 == null)
            o4 = this.PassThruObj4;
        if (o5 == null)
            o5 = this.PassThruObj5;
        var evalStr = "callObj." + callMethod + "();";
        switch (numbParams){
            case 1:
                evalStr = "callObj." + callMethod + "(o1);";
                break;
            case 2:
                evalStr = "callObj." + callMethod + "(o1, o2);";
                break;
            case 3:
                evalStr = "callObj." + callMethod + "(o1, o2, o3);";
                break;
            case 4:
                evalStr = "callObj." + callMethod + "(o1, o2, o3, o4);";
                break;
            case 5:
                evalStr = "callObj." + callMethod + "(o1, o2, o3, o4, o5);";
                break;
        }
        eval(evalStr);
    }
};
ASPdb.FrameworkUI.JsEvent_BeforeAfter = function (){
    this.Before = null;
    this.After = null;
    this.Before = new ASPdb.FrameworkUI.JsEventDelegate();
    this.After = new ASPdb.FrameworkUI.JsEventDelegate();
};
ASPdb.FrameworkUI.JsHelper = function (){
};
ASPdb.FrameworkUI.JsHelper.IsVisible1 = function (element){
    try{
        if (ASPdb.FrameworkUI.JsHelper.GetCalculatedStyle(element, "display") != "none")
            return true;
    }
    catch($$e35){
    }
    return false;
};
ASPdb.FrameworkUI.JsHelper.IsVisible2 = function (jRoot, elementClassName){
    try{
        if (!ASPdb.FrameworkUI.StringStatic.StartsWith(elementClassName, ".", false))
            elementClassName = "." + elementClassName;
        return ASPdb.FrameworkUI.JsHelper.IsVisible1(jRoot.find(elementClassName)[0]);
    }
    catch($$e36){
    }
    return false;
};
ASPdb.FrameworkUI.JsHelper.GetCalculatedStyle = function (element, styleProperty){
    var rtn = null;
    var evalString = "\r\n\t                if (element.currentStyle)\r\n                    {\r\n\t\t                rtn = element.currentStyle[styleProperty];\r\n                    }\r\n\t                else if (window.getComputedStyle)\r\n                    {\r\n                        var computedStyle = document.defaultView.getComputedStyle(element, null);\r\n\t\t                rtn = computedStyle.getPropertyValue(styleProperty);\r\n                    }\r\n            ";
    eval(evalString);
    return rtn;
};
ASPdb.FrameworkUI.JsObj = function (){
    this.Object = null;
};
ASPdb.FrameworkUI.JsObj.O = function (obj){
    var rtn = new ASPdb.FrameworkUI.JsObj();
    rtn.Object = obj;
    return rtn;
};
ASPdb.FrameworkUI.JsObj.prototype.CloneInto = function (objToCloneInto){
    var o2 = ASPdb.FrameworkUI.JsObj.O(objToCloneInto);
    var propNames = this.PropertyNames();
    for (var i = 0; i < propNames.length; i++){
        var propName = propNames[i];
        o2.Property_Set(propName, this.Property_Get(propName, false), false);
    }
    return objToCloneInto;
};
ASPdb.FrameworkUI.JsObj.prototype.PropertyNames = function (){
    var rtn = new Array(0);
    var obj = this.Object;
    var i = 0;
    try{
        eval("for(var propName in obj) { rtn[i++] = propName; }");
    }
    catch($$e37){
    }
    return rtn;
};
ASPdb.FrameworkUI.JsObj.prototype.Property = function (propertyName){
    try{
        var rtn = "";
        var obj = this.Object;
        var propName = propertyName;
        eval("rtn = obj[propName];");
        return rtn;
    }
    catch($$e38){
        return null;
    }
};
ASPdb.FrameworkUI.JsObj.prototype.Property2 = function (propertyName, defaultValue){
    var rtn = null;
    try{
        var obj = this.Object;
        var propName = propertyName;
        eval("rtn = obj[propName];");
    }
    catch($$e39){
    }
    if (rtn == null)
        rtn = defaultValue;
    return rtn;
};
ASPdb.FrameworkUI.JsObj.prototype.Property3 = function (propertyName, defaultValue, useDefaultIfEmptyString){
    var rtn = null;
    try{
        var obj = this.Object;
        var propName = propertyName;
        eval("rtn = obj[propName];");
    }
    catch($$e40){
    }
    if (rtn == null)
        rtn = defaultValue;
    else if (useDefaultIfEmptyString && rtn == "")
        rtn = defaultValue;
    return rtn;
};
ASPdb.FrameworkUI.JsObj.prototype.Property_Get = function (propertyName, useGetterMethod){
    var rtn = null;
    try{
        var obj = this.Object;
        var propName = propertyName;
        if (useGetterMethod)
            eval("rtn = obj.get_" + propName + "();");
        else
            eval("rtn = obj[propName];");
    }
    catch($$e41){
        rtn = null;
    }
    return rtn;
};
ASPdb.FrameworkUI.JsObj.prototype.Property_Set = function (propertyName, value, useSetterMethod){
    try{
        var obj = this.Object;
        var propName = propertyName;
        var val = value;
        if (useSetterMethod)
            eval("rtn = obj.set_" + propName + "(val);");
        else
            eval("rtn = obj[propName] = val;");
        return true;
    }
    catch($$e42){
        return false;
    }
};
ASPdb.FrameworkUI.JsStr = function (){
    this.String = null;
};
ASPdb.FrameworkUI.JsStr.S = function (inputString){
    var rtn = new ASPdb.FrameworkUI.JsStr();
    rtn.String = inputString;
    return rtn;
};
ASPdb.FrameworkUI.JsStr.Replace = function (inputString, oldValue, newValue){
    return inputString.split(oldValue).join(newValue);
};
ASPdb.FrameworkUI.JsStr.prototype.Replace1 = function (oldValue, newValue){
    return ASPdb.FrameworkUI.JsStr.Replace(this.String, oldValue, newValue);
};
ASPdb.FrameworkUI.JsStr.prototype.Replace2 = function (oldValue, newValue){
    this.String = ASPdb.FrameworkUI.JsStr.Replace(this.String, oldValue, newValue);
    return this;
};
ASPdb.FrameworkUI.JsStr.prototype.ToLower = function (){
    this.String = this.String.toLowerCase();
    return this;
};
ASPdb.FrameworkUI.JsStr.prototype.ToUpper = function (){
    this.String = this.String.toUpperCase();
    return this;
};
ASPdb.FrameworkUI.JsStr.prototype.Trim = function (){
    this.String = this.String.trim();
    return this;
};
ASPdb.FrameworkUI.JsStr.StrFormat1 = function (str, param0){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat2 = function (str, param0, param1){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat3 = function (str, param0, param1, param2){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat4 = function (str, param0, param1, param2, param3){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat5 = function (str, param0, param1, param2, param3, param4){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).Replace2("{4}", param4).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat6 = function (str, param0, param1, param2, param3, param4, param5){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).Replace2("{4}", param4).Replace2("{5}", param5).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat7 = function (str, param0, param1, param2, param3, param4, param5, param6){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).Replace2("{4}", param4).Replace2("{5}", param5).Replace2("{6}", param6).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat8 = function (str, param0, param1, param2, param3, param4, param5, param6, param7){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).Replace2("{4}", param4).Replace2("{5}", param5).Replace2("{6}", param6).Replace2("{7}", param7).String;
};
ASPdb.FrameworkUI.JsStr.StrFormat9 = function (str, param0, param1, param2, param3, param4, param5, param6, param7, param8){
    return ASPdb.FrameworkUI.JsStr.S(str).Replace2("{0}", param0).Replace2("{1}", param1).Replace2("{2}", param2).Replace2("{3}", param3).Replace2("{4}", param4).Replace2("{5}", param5).Replace2("{6}", param6).Replace2("{7}", param7).Replace2("{8}", param8).String;
};
ASPdb.FrameworkUI.ElementHolder = function (){
    this.MarkdownLine = null;
    this.ElementType = 0;
    this.IsRoot = false;
    this.ElementName = "";
    this.ModelKey = "";
    this.IdClass = "";
    this.ClassesString = "";
    this.Value = "";
    this.InnerHtml = "";
    this.InputType = "";
    this.EventNames = null;
    this.AttributesStr = "";
    this.TreeLevel = -1;
    this.Parent = null;
    this.Children = null;
};
ASPdb.FrameworkUI.ElementHolder.prototype.Parse = function (line){
    this.MarkdownLine = line;
    this.TreeLevel = this.CountHyphens(line);
    line = line.TruncateLeft(this.TreeLevel).Trim();
    if (line.StartsWith("\'", false)){
        this.ElementName = "";
        this.ElementType = 1;
        line = line.TruncateLeft(1);
        if (line.EndsWith("\'", false))
            line = line.TruncateRight(1);
        this.InnerHtml = line.TheString;
    }
    else {
        this.ElementType = 4;
        if (line.Contains("html=", false)){
            var tmpLine = "";
            var insideSingleQuote = false;
            for (var i = 0; i < line.Length(); i++){
                var c = line.Substring(i, 1);
                if (c == "\'")
                    insideSingleQuote = !insideSingleQuote;
                if (c == " " && insideSingleQuote)
                    tmpLine += "(---[[[SPACE].].]---)";
                else
                    tmpLine += c;
            }
            line.TheString = tmpLine;
        }
        var tokens = line.Split(" ", false);
        if (tokens[0].StartsWith("i", true)){
            this.ElementType = 2;
            this.ElementName = "input";
            this.InputType = "text";
            var inArr = tokens[0].Split(":", false);
            if (inArr.length > 1)
                switch (inArr[1].TheString){
                    case "":
                        this.InputType = "text";
                        break;
                    case "t":
                        this.InputType = "text";
                        break;
                    case "b":
                        this.InputType = "button";
                        break;
                    case "s":
                        this.InputType = "submit";
                        break;
                    case "c":
                        this.InputType = "checkbox";
                        break;
                    case "r":
                        this.InputType = "radio";
                        break;
                    case "f":
                        this.InputType = "file";
                        break;
                    case "h":
                        this.InputType = "hidden";
                        break;
                    default:
                        this.InputType = inArr[1].TheString;
                        break;
                }
        }
        else
            switch (tokens[0].TheString){
                case "d":
                    this.ElementName = "div";
                    break;
                case "s":
                    this.ElementName = "span";
                    break;
                case "br":
                    this.ElementName = "br";
                    this.ElementType = 2;
                    break;
                case "t":
                    this.ElementName = "table";
                    break;
                case "tr":
                    this.ElementName = "tr";
                    break;
                case "td":
                    this.ElementName = "td";
                    break;
                default:
                    this.ElementName = tokens[0].TheString;
                    break;
            }
        this.ClassesString = "";
        for (var i = 1; i < tokens.length; i++){
            var token = tokens[i].Trim();
            token = token.Replace("(---[[[SPACE].].]---)", " ");
            if (token.Length() > 0){
                if (token.StartsWith("#", false)){
                    this.IdClass = token.TruncateLeft(1).Trim().TheString;
                }
                else if (token.StartsWith(".", true)){
                    this.ClassesString += " " + token.TruncateLeft(1).Replace(".", " ").TheString;
                }
                else if (token.StartsWith("evt.", true)){
                    if (this.EventNames == null)
                        this.EventNames = new Array(0);
                    this.EventNames[this.EventNames.length] = token.TruncateLeft(4).Trim().TheString;
                }
                else if (token.StartsWith("m=", true)){
                    var modelKey = token.TruncateLeft(2).Trim();
                    if (modelKey.StartsWith("\'", false))
                        modelKey = modelKey.TruncateLeft(1);
                    if (modelKey.EndsWith("\'", false))
                        modelKey = modelKey.TruncateRight(1);
                    this.ModelKey = modelKey.TheString;
                }
                else if (token.StartsWith("html=", true)){
                    var html = token.TruncateLeft(5).Trim();
                    if (html.StartsWith("\'", false))
                        html = html.TruncateLeft(1);
                    if (html.EndsWith("\'", false))
                        html = html.TruncateRight(1);
                    this.InnerHtml = html.TheString;
                }
                else if (token.StartsWith("v=", true)){
                    var value = token.TruncateLeft(2).Trim();
                    if (value.StartsWith("\'", false))
                        value = value.TruncateLeft(1);
                    if (value.EndsWith("\'", false))
                        value = value.TruncateRight(1);
                    this.Value = value.TheString;
                }
                else if (token.Contains("=", false)){
                    this.AttributesStr += " " + token.TheString + " ";
                }
            }
        }
        if (this.IdClass.length > 0)
            this.ClassesString += " " + this.IdClass;
        this.ClassesString = ASPdb.FrameworkUI.st.New(this.ClassesString).Trim().TheString;
        if (this.EventNames != null && this.IdClass.length > 0)
            for (var i = 0; i < this.EventNames.length; i++)
                this.AttributesStr += ASPdb.FrameworkUI.st.New(" On_{0}=\'{1}_{0}\'").Format2(this.EventNames[0], this.IdClass).TheString;
    }
};
ASPdb.FrameworkUI.ElementHolder.prototype.CountHyphens = function (line){
    var max = 50;
    if (line.Length() < max)
        max = line.Length() - 1;
    for (var i = 0; i < max; i++)
        if (line.Substring(i, 1) != "-")
            return i;
    return -1;
};
ASPdb.FrameworkUI.ElementHolder.prototype.AppendChild = function (element){
    if (this.Children == null)
        this.Children = new Array(0);
    this.Children[this.Children.length] = element;
    element.Parent = this;
};
ASPdb.FrameworkUI.ElementHolder.prototype.AppendSibling = function (element){
    if (this.Parent != null)
        this.Parent.AppendChild(element);
};
ASPdb.FrameworkUI.ElementHolder.prototype.ToHtmlString = function (){
    var rtn = "";
    if (this.ElementType == 4 && (this.Children == null || this.Children.length < 0))
        this.ElementType = 3;
    var prefix = "";
    for (var i = 1; i < this.TreeLevel; i++)
        prefix += "&nbsp;&nbsp;&nbsp;&nbsp;";
    var suffix = "\n";
    if (true){
        prefix = "";
        suffix = "";
    }
    var attributesStr = ASPdb.FrameworkUI.st.New("");
    if (this.InputType.length > 0)
        attributesStr.AppendST(ASPdb.FrameworkUI.st.New(" type=\'{0}\'").Format1(this.InputType));
    if (this.ModelKey.length > 0)
        attributesStr.AppendST(ASPdb.FrameworkUI.st.New(" ModelKey=\'{0}\'").Format1(this.ModelKey));
    if (this.IdClass.length > 0)
        attributesStr.AppendST(ASPdb.FrameworkUI.st.New(" IdClass=\'{0}\'").Format1(this.IdClass));
    if (this.ClassesString.length > 0)
        attributesStr.AppendST(ASPdb.FrameworkUI.st.New(" class=\'{0}\'").Format1(this.ClassesString));
    if (this.Value.length > 0)
        attributesStr.AppendST(ASPdb.FrameworkUI.st.New(" value=\'{0}\'").Format1(this.Value));
    attributesStr = attributesStr.Trim();
    if (this.AttributesStr != "")
        attributesStr.Append(" " + this.AttributesStr);
    if (attributesStr.Length() > 0)
        attributesStr.TheString = " " + attributesStr.TheString;
    if (this.ElementType == 4){
        rtn += ASPdb.FrameworkUI.st.New("{0}<{1}{2}>{3}").Format4(prefix, this.ElementName, attributesStr.TheString, suffix).TheString;
        for (var i = 0; i < this.Children.length; i++)
            rtn += this.Children[i].ToHtmlString();
        rtn += ASPdb.FrameworkUI.st.New("{0}</{1}>{2}").Format3(prefix, this.ElementName, suffix).TheString;
    }
    else if (this.ElementType == 3){
        rtn += ASPdb.FrameworkUI.st.New("{0}<{1}{2}>{3}</{1}>{4}").Format5(prefix, this.ElementName, attributesStr.TheString, this.InnerHtml, suffix).TheString;
    }
    else if (this.ElementType == 2){
        rtn += ASPdb.FrameworkUI.st.New("{0}<{1}{2} />{3}").Format4(prefix, this.ElementName, attributesStr.TheString, suffix).TheString;
    }
    else if (this.ElementType == 1){
        rtn += ASPdb.FrameworkUI.st.New("{0}{1}{2}").Format3(prefix, this.InnerHtml, suffix).TheString;
    }
    return rtn;
};
if (typeof(ASPdb.FrameworkUI.MRB) == "undefined")
    ASPdb.FrameworkUI.MRB = {};
ASPdb.FrameworkUI.MRB.GenericUIList = function (){
    this.IsClientCode = false;
    this.List = null;
    this._internalList = null;
    try{
        var app = System.Web.HttpContext.get_Current().get_Application();
    }
    catch($$e43){
        this.IsClientCode = true;
    }
    this.List = new Array(0);
    if (!this.IsClientCode)
        this._internalList = new System.Collections.Generic.List$1.ctor(ASPdb.FrameworkUI.MRB.GenericUIListItem);
};
ASPdb.FrameworkUI.MRB.GenericUIList.prototype.Add0 = function (item){
    if (this.IsClientCode)
        this.List[this.List.length] = item;
    else {
        this._internalList.Add(item);
        this.List = this._internalList.ToArray();
    }
};
ASPdb.FrameworkUI.MRB.GenericUIList.prototype.Add1 = function (value){
    if (this.IsClientCode)
        this.Add0(ASPdb.FrameworkUI.MRB.GenericUIListItem.New1(value));
};
ASPdb.FrameworkUI.MRB.GenericUIList.prototype.Add2 = function (value, text){
    if (this.IsClientCode)
        this.Add0(ASPdb.FrameworkUI.MRB.GenericUIListItem.New2(value, text));
};
ASPdb.FrameworkUI.MRB.GenericUIList.prototype.Add3 = function (value, text, style){
    if (this.IsClientCode)
        this.Add0(ASPdb.FrameworkUI.MRB.GenericUIListItem.New3(value, text, style));
};
ASPdb.FrameworkUI.MRB.GenericUIListItem = function (){
    this.Value = "";
    this.Text = "";
    this.Style = "";
};
ASPdb.FrameworkUI.MRB.GenericUIListItem.New1 = function (value){
    var rtn = new ASPdb.FrameworkUI.MRB.GenericUIListItem();
    rtn.Value = value;
    rtn.Text = value;
    return rtn;
};
ASPdb.FrameworkUI.MRB.GenericUIListItem.New2 = function (value, text){
    var rtn = new ASPdb.FrameworkUI.MRB.GenericUIListItem();
    rtn.Value = value;
    rtn.Text = text;
    return rtn;
};
ASPdb.FrameworkUI.MRB.GenericUIListItem.New3 = function (value, text, style){
    var rtn = new ASPdb.FrameworkUI.MRB.GenericUIListItem();
    rtn.Value = value;
    rtn.Text = text;
    rtn.Style = style;
    return rtn;
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper = function (mrb){
    this.MRB = null;
    this.MRB = mrb;
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.Bind_ModelToUI = function (mrb, modelKey){
    this.Bind_ModelListElements(mrb, modelKey);
    this.Bind_ModelKeyElements(mrb, modelKey);
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.Bind_ModelListElements = function (mrb, modelKey){
    var jListElements = mrb.jF2("[ModelList]");
    if (jListElements == null)
        return;
    for (var i = 0; i < jListElements.length; i++){
        var jListItem = $(jListElements[i]);
        if (modelKey == "*" || modelKey == jListItem.attr("ModelKey")){
            var modelList_CmdText = jListItem.attr("ModelList");
            var cmd = ASPdb.FrameworkUI.MRB.ModelListCommand.New1(modelList_CmdText);
            var tmpModelObj = ASPdb.FrameworkUI.JsObj.O(mrb).Property_Get(cmd.Model_Name, cmd.UseGetterMethod_Model_Name);
            var optionsList = ASPdb.FrameworkUI.JsObj.O(tmpModelObj).Property_Get(cmd.Model_Collection, cmd.UseGetterMethod_Model_Collection);
            if (optionsList != null && optionsList.length > 0){
                this.Populate_SelectOptions(jListItem, cmd.Model_Collection, optionsList, cmd);
            }
        }
    }
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.Populate_SelectOptions = function (jSelectElement, listPropertiesSetting, optionsObjects, cmd){
    jSelectElement.html("");
    for (var i = 0; i < optionsObjects.length; i++){
        var optionsObj = ASPdb.FrameworkUI.JsObj.O(optionsObjects[i]);
        var value = optionsObj.Property2(cmd.Item_Value, "");
        var text = optionsObj.Property2(cmd.Item_Text, "");
        var style = optionsObj.Property2(cmd.Item_Style, "");
        var styleAttribute = "";
        if (style.length > 0)
            styleAttribute = "style=\'" + style + "\'";
        jSelectElement.append(ASPdb.FrameworkUI.JsStr.StrFormat3("<option value=\'{0}\' {1} >{2}</option>", value, styleAttribute, text));
    }
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.Bind_ModelKeyElements = function (mrb, modelKey){
    var model = mrb.GetModelWithoutFiringEvents();
    if (model == null)
        return;
    var jModelKeyElements = mrb.jF2("[ModelKey]");
    if (jModelKeyElements == null)
        return;
    for (var i = 0; i < jModelKeyElements.length; i++){
        var modelKeyAttrValues = $(jModelKeyElements[i]).attr("ModelKey").split("|");
        for (var ii = 0; ii < modelKeyAttrValues.length; ii++){
            var tmpModelKey = modelKeyAttrValues[ii];
            if (modelKey == "*" || modelKey == tmpModelKey){
                switch (jModelKeyElements[i].tagName.toUpperCase()){
                    case "DIV":
                        this.ProcessModelKey_ForDivOrSpan(model, jModelKeyElements[i], tmpModelKey);
                        break;
                    case "SPAN":
                        this.ProcessModelKey_ForDivOrSpan(model, jModelKeyElements[i], tmpModelKey);
                        break;
                    case "INPUT":
                        this.ProcessModelKey_ForInput(model, jModelKeyElements[i], tmpModelKey);
                        break;
                    case "TEXTAREA":
                        this.ProcessModelKey_ForInput(model, jModelKeyElements[i], tmpModelKey);
                        break;
                    case "SELECT":
                        this.ProcessModelKey_ForSelect(model, jModelKeyElements[i], tmpModelKey);
                        break;
                }
            }
        }
    }
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.ProcessModelKey_ForDivOrSpan = function (model, modelKeyElement, modelKeyCmd){
    var arr = modelKeyCmd.trim().split(":");
    if (arr.length < 2){
        var modelKey = arr[0].trim();
        var modelValue = ASPdb.FrameworkUI.JsObj.O(model).Property(modelKey);
        $(modelKeyElement).html(modelValue);
    }
    else {
        var elementAttrName = arr[0].trim();
        var modelKey = arr[1].trim();
        var modelValue = ASPdb.FrameworkUI.JsObj.O(model).Property(modelKey);
        $(modelKeyElement).attr(elementAttrName, modelValue);
    }
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.ProcessModelKey_ForInput = function (model, modelKeyElement, modelKeyCmd){
    var arr = modelKeyCmd.trim().split(":");
    if (arr.length < 2){
        var modelKey = arr[0].trim();
        var modelValue = ASPdb.FrameworkUI.JsObj.O(model).Property(modelKey);
        $(modelKeyElement).val(modelValue);
    }
    else {
        var elementAttrName = arr[0].trim();
        var modelKey = arr[1].trim();
        var modelValue = ASPdb.FrameworkUI.JsObj.O(model).Property(modelKey);
        $(modelKeyElement).attr(elementAttrName, modelValue);
    }
};
ASPdb.FrameworkUI.MRB.ModelBindingHelper.prototype.ProcessModelKey_ForSelect = function (model, modelKeyElement, modelKeyCmd){
    if (model != null && modelKeyElement != null && modelKeyCmd != null && modelKeyCmd.length > 0){
        var selectElement = modelKeyElement;
        var m = model;
        var value = ASPdb.FrameworkUI.JsObj.O(model).Property_Get(modelKeyCmd, false);
        if (value != null){
            for (var i = 0; i < selectElement.options.length; i++){
                var option = selectElement.options[i] instanceof HTMLOptionElement || selectElement.options[i] == null ? selectElement.options[i] : (function (){
                    throw new Error("InvalidCastException");
                }
                ());
                if (value == option.value){
                    option.selected = true;
                    return;
                }
            }
        }
    }
};
ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper = function (){
};
ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.BindEvents = function (mrb){
    ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.GenericBinder(mrb, "On_Click", "click");
    ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.GenericBinder(mrb, "On_Change", "change");
    ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.GenericBinder(mrb, "On_Focus", "focus");
    ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.GenericBinder(mrb, "On_Blur", "blur");
};
ASPdb.FrameworkUI.MRB.ModelBinding_EventsHelper.GenericBinder = function (mrb, methodPropertyName, eventType){
    var onChangeItems = mrb.jF2("[" + methodPropertyName + "]");
    for (var i = 0; i < onChangeItems.length; i++){
        var item = onChangeItems[i];
        var method = $(item).attr(methodPropertyName);
        ASPdb.FrameworkUI.Evt.Attach_ToElement(eventType, mrb, item, method, null);
    }
};
ASPdb.FrameworkUI.MRB.ModelListCommand = function (){
    this.ModelList_CommandText = null;
    this.UseGetterMethod_Model_Name = false;
    this.UseGetterMethod_Model_Collection = false;
    this.Model_Name = "ViewModel";
    this.Model_Collection = "";
    this.Item_Value = "Value";
    this.Item_Text = "Text";
    this.Item_Style = "Style";
};
ASPdb.FrameworkUI.MRB.ModelListCommand.prototype.ParseCommandText = function (){
    var arr1 = this.ModelList_CommandText.split(".");
    if (arr1.length < 2)
        return;
    var item1 = arr1[0].trim();
    var item2 = arr1[1];
    var arr2 = item2.split("|");
    var item2a = arr2[0].trim();
    var item3 = "";
    var item4 = "";
    var item5 = "";
    if (arr2.length > 1)
        item3 = arr2[1].trim();
    if (arr2.length > 2)
        item4 = arr2[2].trim();
    if (arr2.length > 3)
        item5 = arr2[3].trim();
    if (item1.length < 1)
        item1 = "ViewModel";
    if (item3.length < 1)
        item3 = "Value";
    if (item4.length < 1)
        item4 = "Text";
    if (item5.length < 1)
        item5 = "Style";
    this.Model_Name = item1;
    this.Model_Collection = item2a;
    this.Item_Value = item3;
    this.Item_Text = item4;
    this.Item_Style = item5;
};
ASPdb.FrameworkUI.MRB.ModelListCommand.New1 = function (modelList_CommandText){
    var rtn = new ASPdb.FrameworkUI.MRB.ModelListCommand();
    rtn.ModelList_CommandText = modelList_CommandText;
    rtn.ParseCommandText();
    return rtn;
};
ASPdb.FrameworkUI.MRB.ModelPropertyInfo = function (){
    this.PropertyName = "";
    this.DataType = 0;
    this.UseGetterSetter = false;
};
ASPdb.FrameworkUI.MRB.ModelPropertyInfo.New1 = function (propertyName, dataType, useGetterSetter){
    var rtn = new ASPdb.FrameworkUI.MRB.ModelPropertyInfo();
    rtn.PropertyName = propertyName;
    rtn.DataType = dataType;
    rtn.UseGetterSetter = useGetterSetter;
    return rtn;
};
ASPdb.FrameworkUI.QueryString = function (){
};
ASPdb.FrameworkUI.QueryString.Get = function (key){
    var rtn = "";
    try{
        var name = key;
        var location_search = location.search;
        var results = new Array(2);
        var eval1 = "    name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");                 ";
        var eval2 = "    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\", \"i\");                      ";
        var eval3 = "    var results = regex.exec(location_search);                                               ";
        var eval4 = "    rtn = results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));    ";
        eval(eval1);
        eval(eval2);
        eval(eval3);
        eval(eval4);
    }
    catch($$e44){
        rtn = "";
    }
    return rtn;
};
ASPdb.FrameworkUI.QueryString.Get_AsBool = function (key){
    var value = ASPdb.FrameworkUI.QueryString.Get(key);
    value = value.toLowerCase().trim();
    if (value == "true" || value == "1")
        return true;
    return false;
};
ASPdb.FrameworkUI.QueryString.GetFirstValue_NonKeyParameter = function (){
    var rtn = "";
    var firstItem = window.location.search.split("&")[0].replace("?", "");
    if (!ASPdb.FrameworkUI.StringStatic.Contains(firstItem, "=", false))
        rtn = firstItem;
    return rtn;
};
ASPdb.FrameworkUI.st = function (){
    this.TheString = null;
};
ASPdb.FrameworkUI.st.IsServerSide = false;
ASPdb.FrameworkUI.st.IsServerSide_StaticCheck = false;
ASPdb.FrameworkUI.st.New = function (input){
    var rtn = new ASPdb.FrameworkUI.st();
    rtn.TheString = input;
    if (!ASPdb.FrameworkUI.st.IsServerSide_StaticCheck){
        ASPdb.FrameworkUI.st.IsServerSide = false;
        try{
            var tmp = ("ABC").toLowerCase();
        }
        catch($$e45){
            ASPdb.FrameworkUI.st.IsServerSide = true;
        }
        ASPdb.FrameworkUI.st.IsServerSide_StaticCheck = true;
    }
    return rtn;
};
ASPdb.FrameworkUI.st.prototype.AsJsString = function (){
    return this.TheString;
};
ASPdb.FrameworkUI.st.prototype.Replace = function (oldValue, newValue){
    var rtn = new ASPdb.FrameworkUI.st();
    if (ASPdb.FrameworkUI.st.IsServerSide)
        rtn.TheString = this.TheString.Replace$$String$$String(oldValue, newValue);
    else
        rtn.TheString = this.AsJsString().split(oldValue).join(newValue);
    return rtn;
};
ASPdb.FrameworkUI.st.prototype.Format1 = function (param0){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object(this.TheString, param0));
    else
        return this.Replace("{0}", param0);
};
ASPdb.FrameworkUI.st.prototype.Format2 = function (param0, param1){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$$Object(this.TheString, param0, param1));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1);
};
ASPdb.FrameworkUI.st.prototype.Format3 = function (param0, param1, param2){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$$Object$$Object(this.TheString, param0, param1, param2));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2);
};
ASPdb.FrameworkUI.st.prototype.Format4 = function (param0, param1, param2, param3){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3);
};
ASPdb.FrameworkUI.st.prototype.Format5 = function (param0, param1, param2, param3, param4){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3, param4]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3).Replace("{4}", param4);
};
ASPdb.FrameworkUI.st.prototype.Format6 = function (param0, param1, param2, param3, param4, param5){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3, param4, param5]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3).Replace("{4}", param4).Replace("{5}", param5);
};
ASPdb.FrameworkUI.st.prototype.Format7 = function (param0, param1, param2, param3, param4, param5, param6){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3, param4, param5, param6]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3).Replace("{4}", param4).Replace("{5}", param5).Replace("{6}", param6);
};
ASPdb.FrameworkUI.st.prototype.Format8 = function (param0, param1, param2, param3, param4, param5, param6, param7){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3, param4, param5, param6, param7]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3).Replace("{4}", param4).Replace("{5}", param5).Replace("{6}", param6).Replace("{7}", param7);
};
ASPdb.FrameworkUI.st.prototype.Format9 = function (param0, param1, param2, param3, param4, param5, param6, param7, param8){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(System.String.Format$$String$$Object$Array(this.TheString, [param0, param1, param2, param3, param4, param5, param6, param7, param8]));
    else
        return this.Replace("{0}", param0).Replace("{1}", param1).Replace("{2}", param2).Replace("{3}", param3).Replace("{4}", param4).Replace("{5}", param5).Replace("{6}", param6).Replace("{7}", param7).Replace("{8}", param8);
};
ASPdb.FrameworkUI.st.prototype.IndexOf = function (subString){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return this.TheString.indexOf(subString);
    else
        return this.AsJsString().indexOf(subString);
};
ASPdb.FrameworkUI.st.prototype.Substring = function (startIndex, length){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return this.TheString.substr(startIndex, length);
    else
        return this.AsJsString().substr(startIndex, length);
};
ASPdb.FrameworkUI.st.prototype.StartsWith = function (subString, ignoreCase){
    if (!ignoreCase){
        return (this.IndexOf(subString) == 0);
    }
    else {
        return this.ToLower().IndexOf(ASPdb.FrameworkUI.st.New(subString).ToLower().TheString) == 0;
    }
};
ASPdb.FrameworkUI.st.prototype.EndsWith = function (subString, ignoreCase){
    if (subString.length > this.TheString.length)
        return false;
    var rightPart = this.TheString.substr(this.TheString.length - subString.length, subString.length);
    if (!ignoreCase){
        return (subString == rightPart);
    }
    else {
        return (ASPdb.FrameworkUI.st.New(subString).ToLower().TheString == ASPdb.FrameworkUI.st.New(rightPart).ToLower().TheString);
    }
};
ASPdb.FrameworkUI.st.prototype.TruncateLeft = function (length){
    var rtn = new ASPdb.FrameworkUI.st();
    if (length > this.TheString.length)
        return ASPdb.FrameworkUI.st.New("");
    rtn.TheString = this.Substring(length, this.TheString.length - length);
    return rtn;
};
ASPdb.FrameworkUI.st.prototype.TruncateRight = function (length){
    var rtn = new ASPdb.FrameworkUI.st();
    if (length > this.TheString.length)
        return ASPdb.FrameworkUI.st.New("");
    rtn.TheString = this.Substring(0, this.TheString.length - length);
    return rtn;
};
ASPdb.FrameworkUI.st.prototype.IfStartsWith_Truncate = function (subString, ignoreCase){
    if (this.StartsWith(subString, ignoreCase))
        return this.TruncateLeft(subString.length);
    else
        return ASPdb.FrameworkUI.st.New(this.TheString);
};
ASPdb.FrameworkUI.st.prototype.IfEndsWith_Truncate = function (subString, ignoreCase){
    if (this.EndsWith(subString, ignoreCase))
        return this.TruncateRight(subString.length);
    else
        return ASPdb.FrameworkUI.st.New(this.TheString);
};
ASPdb.FrameworkUI.st.prototype.Split = function (delimiter, ignoreCase){
    if (ASPdb.FrameworkUI.st.IsServerSide){
        if (ignoreCase){
            var input = this.TheString;
            var input_L = input.toLowerCase();
            var delimiter_L = delimiter.toLowerCase();
            var arr = input_L.Split$$String$Array$$StringSplitOptions([delimiter_L], 0);
            var rtn = new Array(arr.length);
            var start = 0;
            for (var i = 0; i < arr.length; i++){
                rtn[i] = new ASPdb.FrameworkUI.st();
                rtn[i].TheString = input.substr(start, arr[i].length);
                start += arr[i].length + delimiter.length;
            }
            return rtn;
        }
        else {
            var arr = this.TheString.Split$$String$Array$$StringSplitOptions([delimiter], 0);
            var rtn = new Array(arr.length);
            for (var i = 0; i < arr.length; i++){
                rtn[i] = new ASPdb.FrameworkUI.st();
                rtn[i].TheString = arr[i];
            }
            return rtn;
        }
    }
    else {
        if (ignoreCase){
            var input = this.AsJsString();
            var input_L = input.toLowerCase();
            var delimiter_L = delimiter.toLowerCase();
            var arr = input_L.split(delimiter_L);
            var rtn = new Array(arr.length);
            var start = 0;
            for (var i = 0; i < arr.length; i++){
                rtn[i] = new ASPdb.FrameworkUI.st();
                rtn[i].TheString = input.substr(start, arr[i].length);
                start += arr[i].length + delimiter.length;
            }
            return rtn;
        }
        else {
            var arr = this.AsJsString().split(delimiter);
            var rtn = new Array(arr.length);
            for (var i = 0; i < arr.length; i++){
                rtn[i] = new ASPdb.FrameworkUI.st();
                rtn[i].TheString = arr[i];
            }
            return rtn;
        }
    }
};
ASPdb.FrameworkUI.st.prototype.Trim = function (){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(this.TheString.trim());
    else
        return ASPdb.FrameworkUI.st.New(this.AsJsString().trim());
};
ASPdb.FrameworkUI.st.prototype.ToLower = function (){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(this.TheString.toLowerCase());
    else
        return ASPdb.FrameworkUI.st.New(this.AsJsString().toLowerCase());
};
ASPdb.FrameworkUI.st.prototype.ToUpper = function (){
    if (ASPdb.FrameworkUI.st.IsServerSide)
        return ASPdb.FrameworkUI.st.New(this.TheString.toUpperCase());
    else
        return ASPdb.FrameworkUI.st.New(this.AsJsString().toUpperCase());
};
ASPdb.FrameworkUI.st.prototype.Append = function (str){
    if (this.TheString == null)
        this.TheString = "";
    this.TheString += str;
    return this;
};
ASPdb.FrameworkUI.st.prototype.AppendST = function (str){
    return this.Append(str.TheString);
};
ASPdb.FrameworkUI.st.prototype.Contains = function (subString, ignoreCase){
    if (ASPdb.FrameworkUI.st.IsServerSide){
        if (!ignoreCase)
            return this.TheString.indexOf(subString) >= 0;
        else
            return this.TheString.toLowerCase().indexOf(subString.toLowerCase()) >= 0;
    }
    else {
        if (!ignoreCase)
            return this.AsJsString().indexOf(subString) >= 0;
        else
            return this.AsJsString().toLowerCase().indexOf(subString.toLowerCase()) >= 0;
    }
};
ASPdb.FrameworkUI.st.prototype.Length = function (){
    return this.TheString.length;
};
ASPdb.FrameworkUI.st.TestUnit = function (){
    var unitName = "ASPdb.FrameworkUI.st";
    var passFail = "Failed";
    var rtn = "";
    var s = null;
    var suffix = "";
    s = ASPdb.FrameworkUI.st.New("AAAaaa BBBbbb CCCccc" + suffix);
    s = s.Replace("BBbb", "--");
    if (s.TheString != "AAAaaa B--b CCCccc")
        rtn += "01) Replace() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb " + suffix);
    if (s.Format1("AA").TheString != "aa AA bb ")
        rtn += "02) Format1() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc " + suffix);
    if (s.Format2("AA", "BB").TheString != "aa AA bb BB cc ")
        rtn += "02) Format2() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd " + suffix);
    if (s.Format3("AA", "BB", "CC").TheString != "aa AA bb BB cc CC dd ")
        rtn += "02) Format3() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee " + suffix);
    if (s.Format4("AA", "BB", "CC", "DD").TheString != "aa AA bb BB cc CC dd DD ee ")
        rtn += "02) Format4() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee {4} ff " + suffix);
    if (s.Format5("AA", "BB", "CC", "DD", "EE").TheString != "aa AA bb BB cc CC dd DD ee EE ff ")
        rtn += "02) Format5() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee {4} ff {5} gg " + suffix);
    if (s.Format6("AA", "BB", "CC", "DD", "EE", "FF").TheString != "aa AA bb BB cc CC dd DD ee EE ff FF gg ")
        rtn += "02) Format6() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee {4} ff {5} gg {6} hh " + suffix);
    if (s.Format7("AA", "BB", "CC", "DD", "EE", "FF", "GG").TheString != "aa AA bb BB cc CC dd DD ee EE ff FF gg GG hh ")
        rtn += "02) Format7() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee {4} ff {5} gg {6} hh {7} ii " + suffix);
    if (s.Format8("AA", "BB", "CC", "DD", "EE", "FF", "GG", "HH").TheString != "aa AA bb BB cc CC dd DD ee EE ff FF gg GG hh HH ii ")
        rtn += "02) Format8() \n";
    s = ASPdb.FrameworkUI.st.New("aa {0} bb {1} cc {2} dd {3} ee {4} ff {5} gg {6} hh {7} ii {8} jj " + suffix);
    if (s.Format9("AA", "BB", "CC", "DD", "EE", "FF", "GG", "HH", "II").TheString != "aa AA bb BB cc CC dd DD ee EE ff FF gg GG hh HH ii II jj ")
        rtn += "02) Format9() \n";
    s = ASPdb.FrameworkUI.st.New("AAaa 1234567890 bbBB" + suffix);
    if (s.StartsWith("AAaa 12", false) != true)
        rtn += "03.a) StartsWith() \n";
    if (s.StartsWith("aaaa 12", false) != false)
        rtn += "03.b) StartsWith() \n";
    if (s.StartsWith("aaaa 12", true) != true)
        rtn += "03.c) StartsWith() \n";
    if (s.EndsWith("90 bbBB", false) != true)
        rtn += "03.d) EndsWith() \n";
    if (s.EndsWith("90 bbbb", false) != false)
        rtn += "03.e) EndsWith() \n";
    if (s.EndsWith("90 bbbb", true) != true)
        rtn += "03.f) EndsWith() \n";
    s = ASPdb.FrameworkUI.st.New("12345678901234567890" + suffix);
    if (s.TruncateLeft(0).TheString != "12345678901234567890")
        rtn += "04.a) TruncateLeft() \n";
    if (s.TruncateLeft(21).TheString != "")
        rtn += "04.b) TruncateLeft() \n";
    if (s.TruncateLeft(5).TheString != "678901234567890")
        rtn += "04.c) TruncateLeft() \n";
    if (s.TruncateRight(0).TheString != "12345678901234567890")
        rtn += "04.d) TruncateRight() \n";
    if (s.TruncateRight(21).TheString != "")
        rtn += "04.e) TruncateRight() \n";
    if (s.TruncateRight(5).TheString != "123456789012345")
        rtn += "04.f) TruncateRight() \n";
    s = ASPdb.FrameworkUI.st.New("a12345678901234567890z" + suffix);
    if (s.IfStartsWith_Truncate("A12345", true).TheString != "678901234567890z")
        rtn += "05.a) IfStartsWith_Truncate() \n";
    if (s.IfStartsWith_Truncate("A12345", false).TheString != "a12345678901234567890z")
        rtn += "05.b) IfStartsWith_Truncate() \n";
    if (s.IfStartsWith_Truncate("a12345", false).TheString != "678901234567890z")
        rtn += "05.c) IfStartsWith_Truncate() \n";
    if (s.IfEndsWith_Truncate("7890Z", true).TheString != "a1234567890123456")
        rtn += "05.d) IfEndsWith_Truncate() \n";
    if (s.IfEndsWith_Truncate("7890Z", false).TheString != "a12345678901234567890z")
        rtn += "05.d) IfEndsWith_Truncate() \n";
    if (s.IfEndsWith_Truncate("7890z", false).TheString != "a1234567890123456")
        rtn += "05.d) IfEndsWith_Truncate() \n";
    s = ASPdb.FrameworkUI.st.New("AAAxBBBxCCCXDDDXEEE" + suffix);
    var arr = s.Split("x", false);
    if (arr.length != 3)
        rtn += "06.a) Split() \n";
    arr = s.Split("x", true);
    if (arr.length != 5)
        rtn += "06.b) Split() \n";
    if (arr[0].TheString != "AAA")
        rtn += "06.c) Split() \n";
    if (arr[4].TheString != "EEE")
        rtn += "06.d) Split() \n";
    s = ASPdb.FrameworkUI.st.New("   Aa Aa   " + suffix);
    if (s.Trim().TheString != "Aa Aa")
        rtn += "07.a) Trim() \n";
    if (s.ToUpper().TheString != "   AA AA   ")
        rtn += "07.b) ToUpper() \n";
    if (s.ToLower().TheString != "   aa aa   ")
        rtn += "07.c) ToLower() \n";
    s = ASPdb.FrameworkUI.st.New("aaa aaa" + suffix);
    s.Append(" aaa");
    if (s.TheString != "aaa aaa aaa")
        rtn += "08.a) Append() \n";
    s.AppendST(ASPdb.FrameworkUI.st.New(" bbb"));
    if (s.TheString != "aaa aaa aaa bbb")
        rtn += "08.b) AppendST() \n";
    if (rtn == "")
        passFail = "Passed";
    return ASPdb.FrameworkUI.st.New("{0} : {1} \n{2}").Format3(unitName, passFail, rtn).TheString;
};
ASPdb.FrameworkUI.StringClass = function (value){
    this._stringValue = "";
    this.set_StringValue(value);
};
ASPdb.FrameworkUI.StringClass.prototype.get_StringValue = function (){
    return this._stringValue;
};
ASPdb.FrameworkUI.StringClass.prototype.set_StringValue = function (value){
    this._stringValue = value;
};
ASPdb.FrameworkUI.StringClass.prototype.Contains = function (value, ignoreCase){
    return ASPdb.FrameworkUI.StringStatic.Contains(this.get_StringValue(), value, ignoreCase);
};
ASPdb.FrameworkUI.StringClass.prototype.RemoveNonNumericChars = function (defaultIfError){
    return ASPdb.FrameworkUI.StringStatic.RemoveNonNumericChars(this.get_StringValue(), defaultIfError);
};
ASPdb.FrameworkUI.StringClass.prototype.IsNullOrEmpty = function (){
    return ASPdb.FrameworkUI.StringStatic.IsNullOrEmpty(this.get_StringValue());
};
ASPdb.FrameworkUI.StringClass.prototype.IsNullOrWhiteSpace = function (){
    return ASPdb.FrameworkUI.StringStatic.IsNullOrWhiteSpace(this.get_StringValue());
};
ASPdb.FrameworkUI.StringStatic = function (){
};
ASPdb.FrameworkUI.StringStatic.Contains = function (inputString, value, ignoreCase){
    if (ignoreCase){
        inputString = inputString.toLowerCase();
        value = value.toLowerCase();
    }
    if (inputString == null || inputString == "")
        return false;
    if (value == null || value == "")
        return false;
    return (inputString.indexOf(value) >= 0);
};
ASPdb.FrameworkUI.StringStatic.RemoveNonNumericChars = function (inputString, defaultIfError){
    var rtn = -1;
    try{
        eval("rtn = inputString.replace(/\\D/g,\'\');");
    }
    catch($$e46){
        rtn = defaultIfError;
    }
    return rtn;
};
ASPdb.FrameworkUI.StringStatic.IsNullOrEmpty = function (value){
    if (value == null)
        return true;
    if (value.length < 1)
        return true;
    return false;
};
ASPdb.FrameworkUI.StringStatic.IsNullOrWhiteSpace = function (value){
    if (value != null)
        value = value.trim();
    return ASPdb.FrameworkUI.StringStatic.IsNullOrEmpty(value);
};
ASPdb.FrameworkUI.StringStatic.StartsWith = function (inputString, value, ignoreCase){
    if (ignoreCase){
        return (inputString.toLowerCase().slice(0, value.length) == value.toLowerCase());
    }
    else {
        return (inputString.slice(0, value.length) == value);
    }
};
ASPdb.FrameworkUI.StringStatic.EndsWith = function (inputString, value, ignoreCase){
    if (ignoreCase){
        return (inputString.toLowerCase().slice(-value.length) == value.toLowerCase());
    }
    else {
        return (inputString.slice(-value.length) == value);
    }
};
ASPdb.FrameworkUI.StringStatic.Replace_StartOfString = function (inputString, replaceStringLength, replaceValue){
    alert("Not Implemented");
    return "";
};
ASPdb.FrameworkUI.StringStatic.Replace_EndOfString = function (inputString, replaceStringLength, replaceValue){
    alert("Not Implemented");
    return "";
};
if (typeof(ASPdb.Security) == "undefined")
    ASPdb.Security = {};
ASPdb.Security.AESKeyInfo = function (){
    this.A = null;
    this.Pass = null;
    this.B = null;
    this.Key = null;
    this.C = null;
    this.IV = null;
    this.D = null;
};
ASPdb.Security.AESKeyInfo.prototype.ToJson = function (){
    var rtn = null;
    eval("rtn = $.toJSON(this);");
    return rtn;
};
ASPdb.Security.AESLogic = function (){
};
ASPdb.Security.AESLogic.CreateNewAES = function (){
    var rtn = new ASPdb.Security.AESKeyInfo();
    rtn.A = ASPdb.Security.AESLogic.RandomBase64(1, 23);
    rtn.B = ASPdb.Security.AESLogic.RandomBase64(0, 11);
    rtn.C = ASPdb.Security.AESLogic.RandomBase64(0, 11);
    rtn.D = ASPdb.Security.AESLogic.RandomBase64(1, 23);
    rtn.Pass = ASPdb.Security.AESLogic.RandomBase64(25, 30);
    var salt1 = ASPdb.Security.AESLogic.CryptoJS_lib_WordArray_random(16);
    var key = ASPdb.Security.AESLogic.CryptoJS_PBKDF2(rtn.Pass, salt1, 4, 200);
    rtn.Key = "" + ASPdb.Security.AESLogic.CryptoJS_enc_Base64_stringify(key);
    var salt2 = ASPdb.Security.AESLogic.CryptoJS_lib_WordArray_random(16);
    var iv = ASPdb.Security.AESLogic.CryptoJS_PBKDF2(rtn.Pass, salt2, 4, 200);
    rtn.IV = "" + ASPdb.Security.AESLogic.CryptoJS_enc_Base64_stringify(iv);
    return rtn;
};
ASPdb.Security.AESLogic.EncryptClient = function (aesKeyInfo, message){
    var key = ASPdb.Security.AESLogic.CryptoJS_enc_Base64_parse(aesKeyInfo.Key);
    var iv = ASPdb.Security.AESLogic.CryptoJS_enc_Base64_parse(aesKeyInfo.IV);
    var parsedText = ASPdb.Security.AESLogic.CryptoJS_enc_Utf8_parse(message);
    var cipherText = ASPdb.Security.AESLogic.CryptoJS_AES_encrypt(parsedText, key, 16, iv);
    return cipherText;
};
ASPdb.Security.AESLogic.DecryptClient = function (aesKeyInfo, cipherText){
    var key = ASPdb.Security.AESLogic.CryptoJS_enc_Base64_parse(aesKeyInfo.Key);
    var iv = ASPdb.Security.AESLogic.CryptoJS_enc_Base64_parse(aesKeyInfo.IV);
    var decrypted = ASPdb.Security.AESLogic.CryptoJS_AES_decrypt(cipherText, key, 16, iv);
    var plainText = ASPdb.Security.AESLogic.ToString_UTF8(decrypted);
    return plainText;
};
ASPdb.Security.AESLogic.RandomBase64 = function (min, max){
    var i = 32;
    eval("i = Math.floor(Math.random()*(max-min+1)+min);");
    var tmp = ASPdb.Security.AESLogic.CryptoJS_lib_WordArray_random(i);
    return ASPdb.Security.AESLogic.CryptoJS_enc_Base64_stringify(tmp);
};
ASPdb.Security.AESLogic.CryptoJS_lib_WordArray_random = function (i){
    var rtn = null;
    var tmp = i;
    eval("rtn = CryptoJS.lib.WordArray.random(tmp);");
    return rtn;
};
ASPdb.Security.AESLogic.CryptoJS_PBKDF2 = function (secretPassphrase, salt, keySize, iterations){
    var rtn = null;
    keySize = 1 * keySize;
    iterations = 1 * iterations;
    eval("rtn = CryptoJS.PBKDF2(secretPassphrase, salt, { keySize: " + keySize + ", iterations: " + iterations + " });");
    return rtn;
};
ASPdb.Security.AESLogic.CryptoJS_enc_Base64_stringify = function (input){
    var rtn = null;
    eval("rtn = CryptoJS.enc.Base64.stringify(input);");
    return rtn;
};
ASPdb.Security.AESLogic.CryptoJS_enc_Base64_parse = function (input){
    var rtn = null;
    eval("rtn = CryptoJS.enc.Base64.parse(input);");
    return rtn;
};
ASPdb.Security.AESLogic.CryptoJS_enc_Utf8_parse = function (input){
    var rtn = null;
    eval("rtn = CryptoJS.enc.Utf8.parse(input);");
    return rtn;
};
ASPdb.Security.AESLogic.CryptoJS_AES_encrypt = function (inputText, key, keySize, iv){
    keySize = 1 * keySize;
    var encryptedCiphertext = "";
    eval("\r\n                var encrypted = CryptoJS.AES.encrypt(inputText, key,\r\n                {\r\n                    keySize: " + keySize + ",\r\n                    iv: iv,\r\n                    mode: CryptoJS.mode.CBC,\r\n                    padding: CryptoJS.pad.Pkcs7\r\n                });\r\n                encryptedCiphertext = encrypted.ciphertext;\r\n            ");
    return ASPdb.Security.AESLogic.CryptoJS_enc_Base64_stringify(encryptedCiphertext);
};
ASPdb.Security.AESLogic.CryptoJS_AES_decrypt = function (cipherText, key, keySize, iv){
    var rtn = null;
    keySize = 1 * keySize;
    eval("\r\n                rtn = CryptoJS.AES.decrypt(cipherText, key,\r\n                {\r\n                    keySize: " + keySize + ",\r\n                    iv: iv,\r\n                    mode: CryptoJS.mode.CBC,\r\n                    padding: CryptoJS.pad.Pkcs7\r\n                });\r\n            ");
    return rtn;
};
ASPdb.Security.AESLogic.ToString_UTF8 = function (input){
    var rtn = null;
    eval("rtn = input.toString(CryptoJS.enc.Utf8);");
    return rtn;
};
ASPdb.Security.AjaxSender = function (){
    this.OnReady = new ASPdb.FrameworkUI.JsEvent_BeforeAfter();
    this.IsReady = false;
    this.PublicKeyPem = null;
    this.AESIndex = null;
    this.AESKey = null;
    this.IsReady = false;
};
ASPdb.Security.AjaxSender.GetObj = function (){
    var rtn = null;
    try{
        eval("rtn = document.ASPdb_Security_AjaxSender;");
    }
    catch($$e47){
    }
    if (rtn == null){
        rtn = new ASPdb.Security.AjaxSender();
        eval("document.ASPdb_Security_AjaxSender = rtn;");
    }
    return rtn;
};
ASPdb.Security.AjaxSender.prototype.Get_AESKey = function (){
    return this.AESKey;
};
ASPdb.Security.AjaxSender.prototype.Initialize = function (){
    ASPdatabaseNET.AjaxService.ASPdatabaseService.New(this, "GetSessionPublicKey_Return").NoEncryption().Authentication__GetSessionPublicKey();
};
ASPdb.Security.AjaxSender.prototype.GetSessionPublicKey_Return = function (ajaxResponse){
    if (this.HandleError(ajaxResponse, "GetSessionPublicKey_Return"))
        return;
    var arr = ajaxResponse.ReturnObj;
    this.AESIndex = arr[0];
    this.PublicKeyPem = arr[1];
    this.Create_and_Send_AESKey();
};
ASPdb.Security.AjaxSender.prototype.Create_and_Send_AESKey = function (){
    this.AESKey = ASPdb.Security.AESLogic.CreateNewAES();
    var json = this.AESKey.ToJson();
    var base64 = "";
    var pem = this.PublicKeyPem;
    eval("\r\n                var jsEncrypt = new JSEncrypt();\r\n                jsEncrypt.setKey(pem);\r\n                base64 = jsEncrypt.encrypt(json);\r\n            ");
    ASPdatabaseNET.AjaxService.ASPdatabaseService.New(this, "SendAESKey_Return").NoEncryption().Authentication__SendAESKey(this.AESIndex, base64);
};
ASPdb.Security.AjaxSender.prototype.SendAESKey_Return = function (ajaxResponse){
    if (this.HandleError(ajaxResponse, "SendAESKey_Return"))
        return;
    var response = ajaxResponse.ReturnObj;
    this.OnReady.Before.Fire();
    this.IsReady = true;
    ASPdatabaseNET.AjaxService.ASPdatabaseService.New(this, "SendAESTest_Return").YesEncryption().Authentication__SendAESTest("Hello Secure World!");
};
ASPdb.Security.AjaxSender.prototype.SendAESTest_Return = function (ajaxResponse){
    if (this.HandleError(ajaxResponse, "SendAESTest_Return"))
        return;
    var response = ajaxResponse.ReturnObj;
    var arr = response.split(" ... ");
    if (arr[0] == "Your message: Hello Secure World!")
        this.OnReady.After.Fire();
    else
        alert("Error in SendAESTest_Return()");
};
ASPdb.Security.AjaxSender.prototype.HandleError = function (ajaxResponse, methodName){
    if (ajaxResponse.Error != null){
        alert("An error occurred while exchanging security keys.\r\nThis is normal and is just a precaution to ensure security.\r\n\r\nPlease refresh your browser and the error should resolve.\r\n\r\nThank you!");
        console.log("------------ In SendAESKey_Return() ---------------------");
        console.log("Error      : " + ajaxResponse.Error.Message);
        console.log("StackTrace : " + ajaxResponse.Error.StackTrace);
        return true;
    }
    else
        return false;
};
ASPdb.Security.RSALogic = function (){
};
ASPdb.Security.RSALogic.GetNew_RSAProvider = function (){
    return new System.Security.Cryptography.RSACryptoServiceProvider.ctor$$Int32(3048);
};
ASPdb.Security.RSALogic.Get_PublicPEM = function (rsa){
    return ASPdb.Security.RSAHelpers.RsaKeyConverter.XmlToPem(rsa.ToXmlString(false));
};
ASPdb.Security.RSALogic.Get_PrivateXML = function (rsa){
    return rsa.ToXmlString(true);
};
ASPdb.Security.RSALogic.Get_RSA = function (privateXML){
    var rtn = new System.Security.Cryptography.RSACryptoServiceProvider.ctor();
    rtn.FromXmlString(privateXML);
    return rtn;
};
ASPdb.Security.RSALogic.Encrypt = function (public_PEM, plainText){
    var xml = ASPdatabaseNET.Security.RsaKeyConverter.RsaKeyConverter.PemToXml(public_PEM);
    var rsa = new System.Security.Cryptography.RSACryptoServiceProvider.ctor();
    try{
        rsa.FromXmlString(xml);
        var input = System.Text.Encoding.get_UTF8().GetBytes$$String(plainText);
        var output = rsa.Encrypt(input, false);
        return System.Convert.ToBase64String$$Byte$Array(output);
    }
    finally{
        rsa.Dispose();
    }
};
ASPdb.Security.RSALogic.Decrypt = function (private_XML, cipherText){
    var rsa = new System.Security.Cryptography.RSACryptoServiceProvider.ctor();
    try{
        rsa.FromXmlString(private_XML);
        var input = System.Convert.FromBase64String(cipherText);
        var output = rsa.Decrypt(input, false);
        return System.Text.Encoding.get_Default().GetString$$Byte$Array(output);
    }
    finally{
        rsa.Dispose();
    }
};
ASPdb.Security.Util = function (){
};
ASPdb.Security.Util.TempTest = function (){
    eval("$(document).ready(function() { ASPdb.Security.Util.TempTest2(); });");
};
ASPdb.Security.Util.TempTest2 = function (){
    var util = new ASPdb.Security.Util();
    var ajaxSender = ASPdb.Security.AjaxSender.GetObj();
    if (!ajaxSender.IsReady){
        ajaxSender.OnReady.After.AddHandler(util, "AjaxSender_OnReady", 0);
        ajaxSender.Initialize();
    }
};
ASPdb.Security.Util.prototype.AjaxSender_OnReady = function (){
    var ajaxSender = ASPdb.Security.AjaxSender.GetObj();
    var publicKey = ajaxSender.PublicKeyPem;
    $(".Text1").val(ajaxSender.AESIndex + "\n\n" + publicKey);
};
ASPdb.Security.Util.GetRandomBase64 = function (minLength, maxLength){
    return "aaa";
};

